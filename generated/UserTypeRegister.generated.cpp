//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DYEditorCodeGenerator.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "Type/UserTypeRegister.h"

#include "Type/TypeRegistry.h"
#include "Serialization/SerializedObjectFactory.h"
#include "ImGui/ImGuiUtil.h"

// Insert user headers here...
#include "include/Components/ExampleComponent.h"
#include "include/Systems/ExampleSystem.h"
#include "include/Components/TurtleComponents.h"
#include "include/Systems/TurtleSystems.h"
#include "include/Components/HowitzerComponents.h"
#include "include/Systems/HowitzerSystems.h"
#include "include/Components/KillComponents.h"
#include "include/Systems/KillSystems.h"
#include "include/Systems/UISystems.h"
#include "include/Components/EnvironmentComponents.h"


namespace DYE::DYEditor
{
	/// A helper function that helps updating context data after a DrawControl call.
	/// Used by DrawInspector functions mostly.
	inline void updateContextAfterDrawControlCall(DrawComponentInspectorContext &context)
	{
		context.IsModificationActivated |= ImGuiUtil::IsControlActivated();
		context.IsModificationDeactivated |= ImGuiUtil::IsControlDeactivated();
		context.IsModificationDeactivatedAfterEdit |= ImGuiUtil::IsControlDeactivatedAfterEdit();
	}

	void userRegisterTypeFunction()
	{
		// Insert user type registration here...

		// Component located in include/Components/ExampleComponent.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::Template::ExampleComponent>
			(
				"Example Component",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{
							auto const& component = entity.GetComponent<DYE::DYEditor::Template::ExampleComponent>();
							serializedComponent.SetPrimitiveTypePropertyValue("IntegerVariable", component.IntegerVariable);
							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							auto& component = entity.AddOrGetComponent<DYE::DYEditor::Template::ExampleComponent>();
							component.IntegerVariable = serializedComponent.GetPrimitiveTypePropertyValueOrDefault<Int32>("IntegerVariable");
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							auto& component = entity.GetComponent<DYE::DYEditor::Template::ExampleComponent>();
							changed |= ImGuiUtil::DrawIntControl("IntegerVariable", component.IntegerVariable); updateContextAfterDrawControlCall(drawInspectorContext);
							return changed;
						}
					}
			);

		// Component located in include/Components/ExampleComponent.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::Template::ComponentWithAllPrimitiveProperties>
			(
				"ComponentWithAllPrimitiveProperties",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{
							auto const& component = entity.GetComponent<DYE::DYEditor::Template::ComponentWithAllPrimitiveProperties>();
							std::string CharVar(" "); CharVar[0] = component.CharVar; serializedComponent.SetPrimitiveTypePropertyValue("CharVar", CharVar);							serializedComponent.SetPrimitiveTypePropertyValue("BoolVar", component.BoolVar);
							serializedComponent.SetPrimitiveTypePropertyValue("Int32Var", component.Int32Var);
							serializedComponent.SetPrimitiveTypePropertyValue("FloatVar", component.FloatVar);
							serializedComponent.SetPrimitiveTypePropertyValue("Vector2Var", component.Vector2Var);
							serializedComponent.SetPrimitiveTypePropertyValue("Vector3Var", component.Vector3Var);
							serializedComponent.SetPrimitiveTypePropertyValue("Vector4Var", component.Vector4Var);
							serializedComponent.SetPrimitiveTypePropertyValue("Color4Var", component.Color4Var);
							serializedComponent.SetPrimitiveTypePropertyValue("StringVar", component.StringVar);
							serializedComponent.SetPrimitiveTypePropertyValue("QuaternionVar", component.QuaternionVar);
							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							auto& component = entity.AddOrGetComponent<DYE::DYEditor::Template::ComponentWithAllPrimitiveProperties>();
							component.CharVar = serializedComponent.GetPrimitiveTypePropertyValueOr<const char*>("CharVar", "a")[0];
							component.BoolVar = serializedComponent.GetPrimitiveTypePropertyValueOr<Bool>("BoolVar", false);
							component.Int32Var = serializedComponent.GetPrimitiveTypePropertyValueOrDefault<Int32>("Int32Var");
							component.FloatVar = serializedComponent.GetPrimitiveTypePropertyValueOrDefault<Float>("FloatVar");
							component.Vector2Var = serializedComponent.GetPrimitiveTypePropertyValueOrDefault<Vector2>("Vector2Var");
							component.Vector3Var = serializedComponent.GetPrimitiveTypePropertyValueOrDefault<Vector3>("Vector3Var");
							component.Vector4Var = serializedComponent.GetPrimitiveTypePropertyValueOrDefault<Vector4>("Vector4Var");
							component.Color4Var = serializedComponent.GetPrimitiveTypePropertyValueOrDefault<Color4>("Color4Var");
							component.StringVar = serializedComponent.GetPrimitiveTypePropertyValueOrDefault<String>("StringVar");
							component.QuaternionVar = serializedComponent.GetPrimitiveTypePropertyValueOrDefault<Quaternion>("QuaternionVar");
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							auto& component = entity.GetComponent<DYE::DYEditor::Template::ComponentWithAllPrimitiveProperties>();
							changed |= ImGuiUtil::DrawCharControl("CharVar", component.CharVar); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawBoolControl("BoolVar", component.BoolVar); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawIntControl("Int32Var", component.Int32Var); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawFloatControl("FloatVar", component.FloatVar); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawVector2Control("Vector2Var", component.Vector2Var); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawVector3Control("Vector3Var", component.Vector3Var); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawVector4Control("Vector4Var", component.Vector4Var); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawColor4Control("Color4Var", component.Color4Var); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawTextControl("StringVar", component.StringVar); updateContextAfterDrawControlCall(drawInspectorContext);
							// 'QuaternionVar' : Quaternion 
							{
								glm::vec3 eulerDegree = glm::eulerAngles(component.QuaternionVar);
								eulerDegree += glm::vec3(0.f); eulerDegree = glm::degrees(eulerDegree);
								if (ImGuiUtil::DrawVector3Control("QuaternionVar", eulerDegree))
								{
									eulerDegree.y = glm::clamp(eulerDegree.y, -90.f, 90.f);
									component.QuaternionVar = glm::quat (glm::radians(eulerDegree));
									changed = true;
								}
								updateContextAfterDrawControlCall(drawInspectorContext);
							}
							return changed;
						}
					}
			);

		// Component located in include/Components/TurtleComponents.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::TurtleInputComponent>
			(
				"Turtle Input Component",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{
							auto const& component = entity.GetComponent<DYE::DYEditor::TurtleInputComponent>();
							serializedComponent.SetPrimitiveTypePropertyValue("ControllerID", component.ControllerID);
							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							auto& component = entity.AddOrGetComponent<DYE::DYEditor::TurtleInputComponent>();
							component.ControllerID = serializedComponent.GetPrimitiveTypePropertyValueOr<Int32>("ControllerID", 0);
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							auto& component = entity.GetComponent<DYE::DYEditor::TurtleInputComponent>();
							changed |= ImGuiUtil::DrawIntControl("ControllerID", component.ControllerID); updateContextAfterDrawControlCall(drawInspectorContext);
							return changed;
						}
					}
			);

		// Component located in include/Components/TurtleComponents.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::TankRotationComponent>
			(
				"Tank Rotation Component",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{
							auto const& component = entity.GetComponent<DYE::DYEditor::TankRotationComponent>();
							serializedComponent.SetPrimitiveTypePropertyValue("AngleInRadian", component.AngleInRadian);
							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							auto& component = entity.AddOrGetComponent<DYE::DYEditor::TankRotationComponent>();
							component.AngleInRadian = serializedComponent.GetPrimitiveTypePropertyValueOr<Float>("AngleInRadian", 0);
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							auto& component = entity.GetComponent<DYE::DYEditor::TankRotationComponent>();
							changed |= ImGuiUtil::DrawFloatControl("AngleInRadian", component.AngleInRadian); updateContextAfterDrawControlCall(drawInspectorContext);
							return changed;
						}
					}
			);

		// Component located in include/Components/TurtleComponents.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::TankMovementComponent>
			(
				"Tank Movement Component",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{
							auto const& component = entity.GetComponent<DYE::DYEditor::TankMovementComponent>();
							serializedComponent.SetPrimitiveTypePropertyValue("FullSpeedPerSecond", component.FullSpeedPerSecond);
							serializedComponent.SetPrimitiveTypePropertyValue("InputBuffer", component.InputBuffer);
							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							auto& component = entity.AddOrGetComponent<DYE::DYEditor::TankMovementComponent>();
							component.FullSpeedPerSecond = serializedComponent.GetPrimitiveTypePropertyValueOr<Float>("FullSpeedPerSecond", 1);
							component.InputBuffer = serializedComponent.GetPrimitiveTypePropertyValueOr<Float>("InputBuffer", 0);
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							auto& component = entity.GetComponent<DYE::DYEditor::TankMovementComponent>();
							changed |= ImGuiUtil::DrawFloatControl("FullSpeedPerSecond", component.FullSpeedPerSecond); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawFloatControl("InputBuffer", component.InputBuffer); updateContextAfterDrawControlCall(drawInspectorContext);
							return changed;
						}
					}
			);

		// Component located in include/Components/HowitzerComponents.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::FollowParentPositionComponent>
			(
				"Follow Parent Position Component",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{
							auto const& component = entity.GetComponent<DYE::DYEditor::FollowParentPositionComponent>();
							serializedComponent.SetPrimitiveTypePropertyValue("PositionOffset", component.PositionOffset);
							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							auto& component = entity.AddOrGetComponent<DYE::DYEditor::FollowParentPositionComponent>();
							component.PositionOffset = serializedComponent.GetPrimitiveTypePropertyValueOr<Vector3>("PositionOffset", glm::vec3(0));
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							auto& component = entity.GetComponent<DYE::DYEditor::FollowParentPositionComponent>();
							changed |= ImGuiUtil::DrawVector3Control("PositionOffset", component.PositionOffset); updateContextAfterDrawControlCall(drawInspectorContext);
							return changed;
						}
					}
			);

		// Component located in include/Components/HowitzerComponents.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::HowitzerInputComponent>
			(
				"Howitzer Input Component",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{
							auto const& component = entity.GetComponent<DYE::DYEditor::HowitzerInputComponent>();
							serializedComponent.SetPrimitiveTypePropertyValue("ControllerID", component.ControllerID);
							serializedComponent.SetPrimitiveTypePropertyValue("AngleStepDegreePerPress", component.AngleStepDegreePerPress);
							serializedComponent.SetPrimitiveTypePropertyValue("DistanceChangePerPress", component.DistanceChangePerPress);
							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							auto& component = entity.AddOrGetComponent<DYE::DYEditor::HowitzerInputComponent>();
							component.ControllerID = serializedComponent.GetPrimitiveTypePropertyValueOr<Int32>("ControllerID", 0);
							component.AngleStepDegreePerPress = serializedComponent.GetPrimitiveTypePropertyValueOr<Float>("AngleStepDegreePerPress", 18);
							component.DistanceChangePerPress = serializedComponent.GetPrimitiveTypePropertyValueOr<Float>("DistanceChangePerPress", 1);
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							auto& component = entity.GetComponent<DYE::DYEditor::HowitzerInputComponent>();
							changed |= ImGuiUtil::DrawIntControl("ControllerID", component.ControllerID); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawFloatControl("AngleStepDegreePerPress", component.AngleStepDegreePerPress); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawFloatControl("DistanceChangePerPress", component.DistanceChangePerPress); updateContextAfterDrawControlCall(drawInspectorContext);
							return changed;
						}
					}
			);

		// Component located in include/Components/HowitzerComponents.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::HowitzerAimingComponent>
			(
				"Howitzer Aiming Component",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{
							auto const& component = entity.GetComponent<DYE::DYEditor::HowitzerAimingComponent>();
							serializedComponent.SetPrimitiveTypePropertyValue("AngleDegreeRelativeToParent", component.AngleDegreeRelativeToParent);
							serializedComponent.SetPrimitiveTypePropertyValue("MinDistance", component.MinDistance);
							serializedComponent.SetPrimitiveTypePropertyValue("MaxDistance", component.MaxDistance);
							serializedComponent.SetPrimitiveTypePropertyValue("CurrDistance", component.CurrDistance);
							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							auto& component = entity.AddOrGetComponent<DYE::DYEditor::HowitzerAimingComponent>();
							component.AngleDegreeRelativeToParent = serializedComponent.GetPrimitiveTypePropertyValueOr<Float>("AngleDegreeRelativeToParent", 0);
							component.MinDistance = serializedComponent.GetPrimitiveTypePropertyValueOr<Float>("MinDistance", 5);
							component.MaxDistance = serializedComponent.GetPrimitiveTypePropertyValueOr<Float>("MaxDistance", 15);
							component.CurrDistance = serializedComponent.GetPrimitiveTypePropertyValueOr<Float>("CurrDistance", 5);
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							auto& component = entity.GetComponent<DYE::DYEditor::HowitzerAimingComponent>();
							changed |= ImGuiUtil::DrawFloatControl("AngleDegreeRelativeToParent", component.AngleDegreeRelativeToParent); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawFloatControl("MinDistance", component.MinDistance); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawFloatControl("MaxDistance", component.MaxDistance); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawFloatControl("CurrDistance", component.CurrDistance); updateContextAfterDrawControlCall(drawInspectorContext);
							return changed;
						}
					}
			);

		// Component located in include/Components/HowitzerComponents.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::ProjectileMovementComponent>
			(
				"Projectile Movement Component",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{
							auto const& component = entity.GetComponent<DYE::DYEditor::ProjectileMovementComponent>();
							serializedComponent.SetPrimitiveTypePropertyValue("TravelSpeedPerSecond", component.TravelSpeedPerSecond);
							serializedComponent.SetPrimitiveTypePropertyValue("MaxTravelDistance", component.MaxTravelDistance);
							serializedComponent.SetPrimitiveTypePropertyValue("TravelledDistance", component.TravelledDistance);
							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							auto& component = entity.AddOrGetComponent<DYE::DYEditor::ProjectileMovementComponent>();
							component.TravelSpeedPerSecond = serializedComponent.GetPrimitiveTypePropertyValueOr<Float>("TravelSpeedPerSecond", 10.0f);
							component.MaxTravelDistance = serializedComponent.GetPrimitiveTypePropertyValueOr<Float>("MaxTravelDistance", 50.0f);
							component.TravelledDistance = serializedComponent.GetPrimitiveTypePropertyValueOr<Float>("TravelledDistance", 0.0f);
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							auto& component = entity.GetComponent<DYE::DYEditor::ProjectileMovementComponent>();
							changed |= ImGuiUtil::DrawFloatControl("TravelSpeedPerSecond", component.TravelSpeedPerSecond); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawFloatControl("MaxTravelDistance", component.MaxTravelDistance); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawFloatControl("TravelledDistance", component.TravelledDistance); updateContextAfterDrawControlCall(drawInspectorContext);
							return changed;
						}
					}
			);

		// Component located in include/Components/HowitzerComponents.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::DebugDrawSphereComponent>
			(
				"Debug Draw Sphere Component",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{
							auto const& component = entity.GetComponent<DYE::DYEditor::DebugDrawSphereComponent>();
							serializedComponent.SetPrimitiveTypePropertyValue("Color", component.Color);
							serializedComponent.SetPrimitiveTypePropertyValue("Radius", component.Radius);
							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							auto& component = entity.AddOrGetComponent<DYE::DYEditor::DebugDrawSphereComponent>();
							component.Color = serializedComponent.GetPrimitiveTypePropertyValueOr<Color4>("Color", glm::vec4(1, 1, 1, 1));
							component.Radius = serializedComponent.GetPrimitiveTypePropertyValueOr<Float>("Radius", 0.5f);
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							auto& component = entity.GetComponent<DYE::DYEditor::DebugDrawSphereComponent>();
							changed |= ImGuiUtil::DrawColor4Control("Color", component.Color); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawFloatControl("Radius", component.Radius); updateContextAfterDrawControlCall(drawInspectorContext);
							return changed;
						}
					}
			);

		// Component located in include/Components/HowitzerComponents.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::DrawTriangleOnTransformComponent>
			(
				"Draw Triangle On Transform",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{
							auto const& component = entity.GetComponent<DYE::DYEditor::DrawTriangleOnTransformComponent>();
							serializedComponent.SetPrimitiveTypePropertyValue("Color", component.Color);
							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							auto& component = entity.AddOrGetComponent<DYE::DYEditor::DrawTriangleOnTransformComponent>();
							component.Color = serializedComponent.GetPrimitiveTypePropertyValueOr<Color4>("Color", glm::vec4(1, 1, 1, 1));
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							auto& component = entity.GetComponent<DYE::DYEditor::DrawTriangleOnTransformComponent>();
							changed |= ImGuiUtil::DrawColor4Control("Color", component.Color); updateContextAfterDrawControlCall(drawInspectorContext);
							return changed;
						}
					}
			);

		// Component located in include/Components/KillComponents.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::KillableComponent>
			(
				"Killable Component",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{
							auto const& component = entity.GetComponent<DYE::DYEditor::KillableComponent>();
							serializedComponent.SetPrimitiveTypePropertyValue("TeamID", component.TeamID);
							serializedComponent.SetPrimitiveTypePropertyValue("MaxHitPoint", component.MaxHitPoint);
							serializedComponent.SetPrimitiveTypePropertyValue("CurrHitPoint", component.CurrHitPoint);
							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							auto& component = entity.AddOrGetComponent<DYE::DYEditor::KillableComponent>();
							component.TeamID = serializedComponent.GetPrimitiveTypePropertyValueOr<Int32>("TeamID", PLAYER_TEAM);
							component.MaxHitPoint = serializedComponent.GetPrimitiveTypePropertyValueOr<Int32>("MaxHitPoint", 1);
							component.CurrHitPoint = serializedComponent.GetPrimitiveTypePropertyValueOr<Int32>("CurrHitPoint", 1);
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							auto& component = entity.GetComponent<DYE::DYEditor::KillableComponent>();
							changed |= ImGuiUtil::DrawIntControl("TeamID", component.TeamID); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawIntControl("MaxHitPoint", component.MaxHitPoint); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawIntControl("CurrHitPoint", component.CurrHitPoint); updateContextAfterDrawControlCall(drawInspectorContext);
							return changed;
						}
					}
			);

		// Component located in include/Components/KillComponents.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::CircleColliderComponent>
			(
				"Circle Collider Component",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{
							auto const& component = entity.GetComponent<DYE::DYEditor::CircleColliderComponent>();
							serializedComponent.SetPrimitiveTypePropertyValue("Radius", component.Radius);
							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							auto& component = entity.AddOrGetComponent<DYE::DYEditor::CircleColliderComponent>();
							component.Radius = serializedComponent.GetPrimitiveTypePropertyValueOr<Float>("Radius", 1);
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							auto& component = entity.GetComponent<DYE::DYEditor::CircleColliderComponent>();
							changed |= ImGuiUtil::DrawFloatControl("Radius", component.Radius); updateContextAfterDrawControlCall(drawInspectorContext);
							return changed;
						}
					}
			);

		// Component located in include/Components/KillComponents.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::DrawCircleColliderComponent>
			(
				"Draw Circle Collider Component",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{
							auto const& component = entity.GetComponent<DYE::DYEditor::DrawCircleColliderComponent>();
							serializedComponent.SetPrimitiveTypePropertyValue("Color", component.Color);
							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							auto& component = entity.AddOrGetComponent<DYE::DYEditor::DrawCircleColliderComponent>();
							component.Color = serializedComponent.GetPrimitiveTypePropertyValueOr<Color4>("Color", Color::Green);
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							auto& component = entity.GetComponent<DYE::DYEditor::DrawCircleColliderComponent>();
							changed |= ImGuiUtil::DrawColor4Control("Color", component.Color); updateContextAfterDrawControlCall(drawInspectorContext);
							return changed;
						}
					}
			);

		// Component located in include/Components/KillComponents.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::KilledComponent>
			(
				"Killed Component",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{

							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							entity.AddOrGetComponent<DYE::DYEditor::KilledComponent>();
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							ImGui::Indent();
							ImGui::TextUnformatted("The component doesn't have any properties (i.e. DYE_PROPERTY).");
							ImGui::Unindent();
							return changed;
						}
					}
			);

		// Component located in include/Components/KillComponents.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::ExplodeOnKilledComponent>
			(
				"Explode On Killed Component",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{
							auto const& component = entity.GetComponent<DYE::DYEditor::ExplodeOnKilledComponent>();
							serializedComponent.SetPrimitiveTypePropertyValue("TeamIDToKill", component.TeamIDToKill);
							serializedComponent.SetPrimitiveTypePropertyValue("ExplodeRadius", component.ExplodeRadius);
							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							auto& component = entity.AddOrGetComponent<DYE::DYEditor::ExplodeOnKilledComponent>();
							component.TeamIDToKill = serializedComponent.GetPrimitiveTypePropertyValueOr<Int32>("TeamIDToKill", ENEMY_TEAM);
							component.ExplodeRadius = serializedComponent.GetPrimitiveTypePropertyValueOr<Float>("ExplodeRadius", 3.5f);
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							auto& component = entity.GetComponent<DYE::DYEditor::ExplodeOnKilledComponent>();
							changed |= ImGuiUtil::DrawIntControl("TeamIDToKill", component.TeamIDToKill); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawFloatControl("ExplodeRadius", component.ExplodeRadius); updateContextAfterDrawControlCall(drawInspectorContext);
							return changed;
						}
					}
			);

		// Component located in include/Components/KillComponents.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::AddPointsToTeamOnKilledComponent>
			(
				"Add Points To Team On Killed Component",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{
							auto const& component = entity.GetComponent<DYE::DYEditor::AddPointsToTeamOnKilledComponent>();
							serializedComponent.SetPrimitiveTypePropertyValue("TeamIDToAddTo", component.TeamIDToAddTo);
							serializedComponent.SetPrimitiveTypePropertyValue("Points", component.Points);
							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							auto& component = entity.AddOrGetComponent<DYE::DYEditor::AddPointsToTeamOnKilledComponent>();
							component.TeamIDToAddTo = serializedComponent.GetPrimitiveTypePropertyValueOr<Int32>("TeamIDToAddTo", PLAYER_TEAM);
							component.Points = serializedComponent.GetPrimitiveTypePropertyValueOr<Int32>("Points", 100.0f);
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							auto& component = entity.GetComponent<DYE::DYEditor::AddPointsToTeamOnKilledComponent>();
							changed |= ImGuiUtil::DrawIntControl("TeamIDToAddTo", component.TeamIDToAddTo); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawIntControl("Points", component.Points); updateContextAfterDrawControlCall(drawInspectorContext);
							return changed;
						}
					}
			);

		// Component located in include/Components/KillComponents.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::ExplodeAnimationComponent>
			(
				"Explode Animation Component",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{
							auto const& component = entity.GetComponent<DYE::DYEditor::ExplodeAnimationComponent>();
							serializedComponent.SetPrimitiveTypePropertyValue("StartRadius", component.StartRadius);
							serializedComponent.SetPrimitiveTypePropertyValue("EndRadius", component.EndRadius);
							serializedComponent.SetPrimitiveTypePropertyValue("StartColor", component.StartColor);
							serializedComponent.SetPrimitiveTypePropertyValue("EndColor", component.EndColor);
							serializedComponent.SetPrimitiveTypePropertyValue("AnimationTime", component.AnimationTime);
							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							auto& component = entity.AddOrGetComponent<DYE::DYEditor::ExplodeAnimationComponent>();
							component.StartRadius = serializedComponent.GetPrimitiveTypePropertyValueOr<Float>("StartRadius", 3.5f);
							component.EndRadius = serializedComponent.GetPrimitiveTypePropertyValueOr<Float>("EndRadius", 4.0f);
							component.StartColor = serializedComponent.GetPrimitiveTypePropertyValueOr<Color4>("StartColor", Color::White);
							component.EndColor = serializedComponent.GetPrimitiveTypePropertyValueOr<Color4>("EndColor", glm::vec4(1, 1, 1, 0));
							component.AnimationTime = serializedComponent.GetPrimitiveTypePropertyValueOr<Float>("AnimationTime", 0.5f);
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							auto& component = entity.GetComponent<DYE::DYEditor::ExplodeAnimationComponent>();
							changed |= ImGuiUtil::DrawFloatControl("StartRadius", component.StartRadius); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawFloatControl("EndRadius", component.EndRadius); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawColor4Control("StartColor", component.StartColor); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawColor4Control("EndColor", component.EndColor); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawFloatControl("AnimationTime", component.AnimationTime); updateContextAfterDrawControlCall(drawInspectorContext);
							return changed;
						}
					}
			);

		// Component located in include/Components/KillComponents.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::TeamPointsComponent>
			(
				"Team Points Component",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{
							auto const& component = entity.GetComponent<DYE::DYEditor::TeamPointsComponent>();
							serializedComponent.SetPrimitiveTypePropertyValue("TeamID", component.TeamID);
							serializedComponent.SetPrimitiveTypePropertyValue("Points", component.Points);
							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							auto& component = entity.AddOrGetComponent<DYE::DYEditor::TeamPointsComponent>();
							component.TeamID = serializedComponent.GetPrimitiveTypePropertyValueOr<Int32>("TeamID", PLAYER_TEAM);
							component.Points = serializedComponent.GetPrimitiveTypePropertyValueOr<Int32>("Points", 0);
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							auto& component = entity.GetComponent<DYE::DYEditor::TeamPointsComponent>();
							changed |= ImGuiUtil::DrawIntControl("TeamID", component.TeamID); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawIntControl("Points", component.Points); updateContextAfterDrawControlCall(drawInspectorContext);
							return changed;
						}
					}
			);

		// Component located in include/Components/KillComponents.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::TeamPointsUIComponent>
			(
				"Team Points UI",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{

							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							entity.AddOrGetComponent<DYE::DYEditor::TeamPointsUIComponent>();
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							ImGui::Indent();
							ImGui::TextUnformatted("The component doesn't have any properties (i.e. DYE_PROPERTY).");
							ImGui::Unindent();
							return changed;
						}
					}
			);

		// Component located in include/Components/EnvironmentComponents.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::BorderComponent>
			(
				"Border",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{

							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							entity.AddOrGetComponent<DYE::DYEditor::BorderComponent>();
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							ImGui::Indent();
							ImGui::TextUnformatted("The component doesn't have any properties (i.e. DYE_PROPERTY).");
							ImGui::Unindent();
							return changed;
						}
					}
			);

		// System located in include/Systems/ExampleSystem.h
		static DYE::DYEditor::Template::ExampleSystem _ExampleSystem;
		TypeRegistry::RegisterSystem("Example System", &_ExampleSystem);

		// System located in include/Systems/TurtleSystems.h
		static DYE::DYEditor::TurtleInputSystem _TurtleInputSystem;
		TypeRegistry::RegisterSystem("Turtle Input System", &_TurtleInputSystem);

		// System located in include/Systems/TurtleSystems.h
		static DYE::DYEditor::TurtleMovementSystem _TurtleMovementSystem;
		TypeRegistry::RegisterSystem("Turtle Movement System", &_TurtleMovementSystem);

		// System located in include/Systems/HowitzerSystems.h
		static DYE::DYEditor::FollowParentPositionSystem _FollowParentPositionSystem;
		TypeRegistry::RegisterSystem("Follow Parent Position System", &_FollowParentPositionSystem);

		// System located in include/Systems/HowitzerSystems.h
		static DYE::DYEditor::HowitzerInputSystem _HowitzerInputSystem;
		TypeRegistry::RegisterSystem("Howitzer Input System", &_HowitzerInputSystem);

		// System located in include/Systems/HowitzerSystems.h
		static DYE::DYEditor::RotateHowitzerSystem _RotateHowitzerSystem;
		TypeRegistry::RegisterSystem("Rotate Howitzer System", &_RotateHowitzerSystem);

		// System located in include/Systems/HowitzerSystems.h
		static DYE::DYEditor::RenderHowitzerAimSystem _RenderHowitzerAimSystem;
		TypeRegistry::RegisterSystem("Render Howitzer Aim System", &_RenderHowitzerAimSystem);

		// System located in include/Systems/HowitzerSystems.h
		static DYE::DYEditor::ProjectileTravelSystem _ProjectileTravelSystem;
		TypeRegistry::RegisterSystem("Projectile Travel System", &_ProjectileTravelSystem);

		// System located in include/Systems/HowitzerSystems.h
		static DYE::DYEditor::RenderDebugSphereSystem _RenderDebugSphereSystem;
		TypeRegistry::RegisterSystem("Render Debug Sphere System", &_RenderDebugSphereSystem);

		// System located in include/Systems/HowitzerSystems.h
		static DYE::DYEditor::RenderTriangleSystem _RenderTriangleSystem;
		TypeRegistry::RegisterSystem("Render Triangle System", &_RenderTriangleSystem);

		// System located in include/Systems/KillSystems.h
		static DYE::DYEditor::GameEffectOnKilledSystem _GameEffectOnKilledSystem;
		TypeRegistry::RegisterSystem("Game Effect On Killed System", &_GameEffectOnKilledSystem);

		// System located in include/Systems/KillSystems.h
		static DYE::DYEditor::DestroyEntityOnKilledSystem _DestroyEntityOnKilledSystem;
		TypeRegistry::RegisterSystem("Destroy Entity On Killed System", &_DestroyEntityOnKilledSystem);

		// System located in include/Systems/KillSystems.h
		static DYE::DYEditor::ExplodeAnimationSystem _ExplodeAnimationSystem;
		TypeRegistry::RegisterSystem("Explode Animation System", &_ExplodeAnimationSystem);

		// System located in include/Systems/KillSystems.h
		static DYE::DYEditor::DrawCircleColliderSystem _DrawCircleColliderSystem;
		TypeRegistry::RegisterSystem("Draw Circle Collider Component", &_DrawCircleColliderSystem);

		// System located in include/Systems/UISystems.h
		static DYE::DYEditor::TeamPointsUISystem _TeamPointsUISystem;
		TypeRegistry::RegisterSystem("Team Points UI System", &_TeamPointsUISystem);

	}

	class UserTypeRegister_Generated
	{
	public:
		UserTypeRegister_Generated()
		{
			DYE::DYEditor::AssignRegisterUserTypeFunctionPointer(userRegisterTypeFunction);
		}
	};

	[[maybe_unused]]
	static UserTypeRegister_Generated userTypeRegister_GeneratedInstance = UserTypeRegister_Generated();
}
