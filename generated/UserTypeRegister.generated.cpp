//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DYEditorCodeGenerator.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "Type/UserTypeRegister.h"

#include "Type/TypeRegistry.h"
#include "Serialization/SerializedObjectFactory.h"
#include "ImGui/ImGuiUtil.h"

// Insert user headers here...
#include "include/Components/ExampleComponent.h"
#include "include/Systems/ExampleSystem.h"
#include "include/Components/TurtleComponents.h"
#include "include/Systems/TurtleSystems.h"


namespace DYE::DYEditor
{
	/// A helper function that helps updating context data after a DrawControl call.
	/// Used by DrawInspector functions mostly.
	inline void updateContextAfterDrawControlCall(DrawComponentInspectorContext &context)
	{
		context.IsModificationActivated |= ImGuiUtil::IsControlActivated();
		context.IsModificationDeactivated |= ImGuiUtil::IsControlDeactivated();
		context.IsModificationDeactivatedAfterEdit |= ImGuiUtil::IsControlDeactivatedAfterEdit();
	}

	void userRegisterTypeFunction()
	{
		// Insert user type registration here...

		// Component located in include/Components/ExampleComponent.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::Template::ExampleComponent>
			(
				"Example Component",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{
							auto const& component = entity.GetComponent<DYE::DYEditor::Template::ExampleComponent>();
							serializedComponent.SetPrimitiveTypePropertyValue("IntegerVariable", component.IntegerVariable);
							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							auto& component = entity.AddOrGetComponent<DYE::DYEditor::Template::ExampleComponent>();
							component.IntegerVariable = serializedComponent.GetPrimitiveTypePropertyValueOrDefault<Int32>("IntegerVariable");
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							auto& component = entity.GetComponent<DYE::DYEditor::Template::ExampleComponent>();
							changed |= ImGuiUtil::DrawIntControl("IntegerVariable", component.IntegerVariable); updateContextAfterDrawControlCall(drawInspectorContext);
							return changed;
						}
					}
			);

		// Component located in include/Components/ExampleComponent.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::Template::ComponentWithAllPrimitiveProperties>
			(
				"ComponentWithAllPrimitiveProperties",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{
							auto const& component = entity.GetComponent<DYE::DYEditor::Template::ComponentWithAllPrimitiveProperties>();
							std::string CharVar(" "); CharVar[0] = component.CharVar; serializedComponent.SetPrimitiveTypePropertyValue("CharVar", CharVar);							serializedComponent.SetPrimitiveTypePropertyValue("BoolVar", component.BoolVar);
							serializedComponent.SetPrimitiveTypePropertyValue("Int32Var", component.Int32Var);
							serializedComponent.SetPrimitiveTypePropertyValue("FloatVar", component.FloatVar);
							serializedComponent.SetPrimitiveTypePropertyValue("Vector2Var", component.Vector2Var);
							serializedComponent.SetPrimitiveTypePropertyValue("Vector3Var", component.Vector3Var);
							serializedComponent.SetPrimitiveTypePropertyValue("Vector4Var", component.Vector4Var);
							serializedComponent.SetPrimitiveTypePropertyValue("Color4Var", component.Color4Var);
							serializedComponent.SetPrimitiveTypePropertyValue("StringVar", component.StringVar);
							serializedComponent.SetPrimitiveTypePropertyValue("QuaternionVar", component.QuaternionVar);
							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							auto& component = entity.AddOrGetComponent<DYE::DYEditor::Template::ComponentWithAllPrimitiveProperties>();
							component.CharVar = serializedComponent.GetPrimitiveTypePropertyValueOr<const char*>("CharVar", "a")[0];
							component.BoolVar = serializedComponent.GetPrimitiveTypePropertyValueOr<Bool>("BoolVar", false);
							component.Int32Var = serializedComponent.GetPrimitiveTypePropertyValueOrDefault<Int32>("Int32Var");
							component.FloatVar = serializedComponent.GetPrimitiveTypePropertyValueOrDefault<Float>("FloatVar");
							component.Vector2Var = serializedComponent.GetPrimitiveTypePropertyValueOrDefault<Vector2>("Vector2Var");
							component.Vector3Var = serializedComponent.GetPrimitiveTypePropertyValueOrDefault<Vector3>("Vector3Var");
							component.Vector4Var = serializedComponent.GetPrimitiveTypePropertyValueOrDefault<Vector4>("Vector4Var");
							component.Color4Var = serializedComponent.GetPrimitiveTypePropertyValueOrDefault<Color4>("Color4Var");
							component.StringVar = serializedComponent.GetPrimitiveTypePropertyValueOrDefault<String>("StringVar");
							component.QuaternionVar = serializedComponent.GetPrimitiveTypePropertyValueOrDefault<Quaternion>("QuaternionVar");
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							auto& component = entity.GetComponent<DYE::DYEditor::Template::ComponentWithAllPrimitiveProperties>();
							changed |= ImGuiUtil::DrawCharControl("CharVar", component.CharVar); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawBoolControl("BoolVar", component.BoolVar); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawIntControl("Int32Var", component.Int32Var); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawFloatControl("FloatVar", component.FloatVar); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawVector2Control("Vector2Var", component.Vector2Var); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawVector3Control("Vector3Var", component.Vector3Var); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawVector4Control("Vector4Var", component.Vector4Var); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawColor4Control("Color4Var", component.Color4Var); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawTextControl("StringVar", component.StringVar); updateContextAfterDrawControlCall(drawInspectorContext);
							// 'QuaternionVar' : Quaternion 
							{
								glm::vec3 eulerDegree = glm::eulerAngles(component.QuaternionVar);
								eulerDegree += glm::vec3(0.f); eulerDegree = glm::degrees(eulerDegree);
								if (ImGuiUtil::DrawVector3Control("QuaternionVar", eulerDegree))
								{
									eulerDegree.y = glm::clamp(eulerDegree.y, -90.f, 90.f);
									component.QuaternionVar = glm::quat (glm::radians(eulerDegree));
									changed = true;
								}
								updateContextAfterDrawControlCall(drawInspectorContext);
							}
							return changed;
						}
					}
			);

		// Component located in include/Components/TurtleComponents.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::TurtleInputComponent>
			(
				"Turtle Input Component",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{
							auto const& component = entity.GetComponent<DYE::DYEditor::TurtleInputComponent>();
							serializedComponent.SetPrimitiveTypePropertyValue("ControllerID", component.ControllerID);
							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							auto& component = entity.AddOrGetComponent<DYE::DYEditor::TurtleInputComponent>();
							component.ControllerID = serializedComponent.GetPrimitiveTypePropertyValueOr<Int32>("ControllerID", 0);
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							auto& component = entity.GetComponent<DYE::DYEditor::TurtleInputComponent>();
							changed |= ImGuiUtil::DrawIntControl("ControllerID", component.ControllerID); updateContextAfterDrawControlCall(drawInspectorContext);
							return changed;
						}
					}
			);

		// Component located in include/Components/TurtleComponents.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::TargetRotationComponent>
			(
				"Target Rotation Component",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{
							auto const& component = entity.GetComponent<DYE::DYEditor::TargetRotationComponent>();
							serializedComponent.SetPrimitiveTypePropertyValue("AngleInRadian", component.AngleInRadian);
							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							auto& component = entity.AddOrGetComponent<DYE::DYEditor::TargetRotationComponent>();
							component.AngleInRadian = serializedComponent.GetPrimitiveTypePropertyValueOr<Float>("AngleInRadian", 0);
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							auto& component = entity.GetComponent<DYE::DYEditor::TargetRotationComponent>();
							changed |= ImGuiUtil::DrawFloatControl("AngleInRadian", component.AngleInRadian); updateContextAfterDrawControlCall(drawInspectorContext);
							return changed;
						}
					}
			);

		// Component located in include/Components/TurtleComponents.h
		TypeRegistry::RegisterComponentType<DYE::DYEditor::TankMovementComponent>
			(
				"Tank Movement Component",
				ComponentTypeDescriptor
					{
						.Serialize = [](Entity& entity, SerializedComponent& serializedComponent)
						{
							auto const& component = entity.GetComponent<DYE::DYEditor::TankMovementComponent>();
							serializedComponent.SetPrimitiveTypePropertyValue("FullSpeedPerSecond", component.FullSpeedPerSecond);
							serializedComponent.SetPrimitiveTypePropertyValue("InputBuffer", component.InputBuffer);
							return SerializationResult {};
						},
						.Deserialize = [](SerializedComponent& serializedComponent, DYE::DYEditor::Entity& entity)
						{
							auto& component = entity.AddOrGetComponent<DYE::DYEditor::TankMovementComponent>();
							component.FullSpeedPerSecond = serializedComponent.GetPrimitiveTypePropertyValueOr<Float>("FullSpeedPerSecond", 1);
							component.InputBuffer = serializedComponent.GetPrimitiveTypePropertyValueOr<Float>("InputBuffer", 0);
							return DeserializationResult {};
						},
						.DrawInspector = [](DrawComponentInspectorContext &drawInspectorContext, Entity &entity)
						{
							bool changed = false;
							auto& component = entity.GetComponent<DYE::DYEditor::TankMovementComponent>();
							changed |= ImGuiUtil::DrawFloatControl("FullSpeedPerSecond", component.FullSpeedPerSecond); updateContextAfterDrawControlCall(drawInspectorContext);
							changed |= ImGuiUtil::DrawFloatControl("InputBuffer", component.InputBuffer); updateContextAfterDrawControlCall(drawInspectorContext);
							return changed;
						}
					}
			);

		// System located in include/Systems/ExampleSystem.h
		static DYE::DYEditor::Template::ExampleSystem _ExampleSystem;
		TypeRegistry::RegisterSystem("Example System", &_ExampleSystem);

		// System located in include/Systems/TurtleSystems.h
		static DYE::DYEditor::TurtleInputSystem _TurtleInputSystem;
		TypeRegistry::RegisterSystem("Turtle Input System", &_TurtleInputSystem);

		// System located in include/Systems/TurtleSystems.h
		static DYE::DYEditor::TurtleMovementSystem _TurtleMovementSystem;
		TypeRegistry::RegisterSystem("Turtle Movement System", &_TurtleMovementSystem);

	}

	class UserTypeRegister_Generated
	{
	public:
		UserTypeRegister_Generated()
		{
			DYE::DYEditor::AssignRegisterUserTypeFunctionPointer(userRegisterTypeFunction);
		}
	};

	[[maybe_unused]]
	static UserTypeRegister_Generated userTypeRegister_GeneratedInstance = UserTypeRegister_Generated();
}
